'''
Multiprocessing source: https://machinelearningmastery.com/multiprocessing-in-python/
'''

from concurrent.futures import process
import multiprocessing as mp
import numpy as np
import time

from game_manager import run_game
from GA_ai import Network, Population
from logger import Logger


def progress_bar(progress, total):
    percent = 100 * (progress / float(total))
    bar = 'â– ' * int(percent/2) + '-' * (50 - int(percent/2))
    print(f"\r|{bar}| {percent:.2f}%", end="\r")


if __name__ == '__main__':
    pool = mp.Pool(10)  # Max processes running at a time
    start_time = time.perf_counter()

    # Logging information
    log = Logger('plot')
    log.log_to_file('fitness')   # Print to log
    log_chromosome = Logger('Chromosome_database')
    log_chromosome.log_to_file('Code')
    avg_fitness = 0


    gen_limit = 50
    pop_size = 40
    game_quantity = 50


    # Initialize network (input_size, output_size, nr_hidden_layers, hidden_size)
    network = Network(44, 4, 2, 5)
    # Initialize population (population_size, code_size)
    pop = Population(pop_size, network.total_nr_elements)
    # pop.overwrite_population([-117.59595841098367, -42.104420916014405, 32.57382437239345, 32.8669141520636, -104.20928973853124, -200.71712873379394, 35.327317384180056, -140.27128125152893, 44.058149712848255, -106.24669228111773, -114.40309345064398, 44.62561376637814, 71.9434042043762, -35.71170168809672, -30.813728753831214, -27.29613822284842, 66.99776751203149, -77.39916956731071, -41.34291238858412, -95.05029848970969, 24.3518276665845, 17.435082776001032, -150.10457391186637, 24.727589409979824, -109.36001341896866, -5.678823940701255, -26.365080211981134, 28.715517186827245, 18.1075614257029, 97.73526932932457, -23.069745848160053, -30.347095772077175, 84.45182245710724, 174.64015697967122, 188.39807525001726, -60.49774948025846, 56.423981359767495, -160.83595511247538, 29.737158804053767, 58.968384459456445, -22.491293363070064, -8.495630064814993, 40.57458574071519, 65.23651789026992, 48.83987910131906, -4.280991850733743, 88.08751339309636, 58.41215164389547, 28.275952639326917, 26.23759157079766, -84.55073938706666, 19.99804324562868, -86.22708760624057, 56.47193895745877, 86.78209060505993, 127.03803723429894, 68.59874845556946, -102.10053904687294, 104.65509323157053, 64.3835139059303, 24.895142917256713, 79.25507793711807, -122.69080523277768, -51.35219813109008, 141.5901725689141, -98.44754145427444, 110.37244490592965, 40.38162880265077, 35.42611728302168, 58.81162186627793, 148.92868576893517, 124.09439110803658, -157.484694892683, 46.068796135744606, 43.257127428647344, -60.98108162400378, 24.445867783460727, 53.154931699382246, 44.15158162023475, -109.41474202203074, 77.83773848390022, -51.75635393315184, 5.918712048504441, 28.781914851154177, -68.34417048215468, 94.39316888847543, -66.7066359715347, -98.01336919611259, 52.501357566240216, 100.98880789622122, -117.05038690995923, -120.18000557263775, 134.71041002482406, 49.91785512623431, 14.831906996659075, 135.98172152111093, -56.01128371172519, 28.988731906781556, -80.17144655188925, 167.52559539353524, -106.91592354327344, -0.967853554156531, -12.854776600204476, 62.09906337252659, -40.69890939890526, 28.607407064574364, 26.17573212182941, -30.8213060617945, 59.0059445832407, -121.43748799650713, 205.588869570372, 28.12192678479117, 116.95746851399076, 15.416643231098893, 94.8458717638139, 142.84549032776033, -18.396465692063295, -107.53370075851531, 22.090621085225084, 0.8393313874013124, -63.63864853286964, 12.51364936350355, 60.26145878614295, 38.43374672940249, -105.93438886643601, -90.61847904584701, -104.92082775662041, 50.594770811014854, 36.971386407865566, -63.43087745558174, -61.362371374934895, -114.9456725838487, -20.899143621154632, 155.19445784944443, 112.58135935841572, -8.527980729844744, 154.57683227566682, 9.967827466619141, -23.79246332410292, 85.78861497402086, 38.831453077445, -56.71572948525619, -9.697450557907274, -31.916853151261463, 5.8919487660016685, 19.522076491423558, -13.775934047453891, -96.70073615498701, 72.17379114108263, -22.59952582684297, -115.45390445220701, -112.65803792453475, 148.39143594241332, -94.2055002821068, -131.62845607483115, 99.45071317687874, -139.39375831125062, -101.125410195887, 59.98794523785329, 50.19203375042199, -64.84845923471265, -37.13624021228642, 73.02183141343598, 130.26881692700636, -15.465614391143639, 2.7758322390074732, 44.14185799063327, -6.729182071814382, -20.73816289146661, -146.03896803864063, 5.328148362878558, 103.62346094634752, 92.25391531935256, 74.73371427540589, 88.1753062513317])


    for generation in range(gen_limit):
        progress_bar(generation, gen_limit)
        
        avg_fitness = 0
        games_won = 0
        
        for chromosome in pop.population:
            network.update_layers(chromosome.code)

            # Spawn processes to run games in parallel
            processes = [pool.apply_async(run_game, args=(network,)) for _ in range(game_quantity)]
            result = np.array([p.get() for p in processes])
            
            score = np.sum(result)
            chromosome.fitness = score
            avg_fitness += score
            games_won += np.count_nonzero(result == 3)
        
        # logging
        avg_fitness /= pop_size
        games_won /= pop_size
        games_won_percent = 100 * games_won / game_quantity
        log.log_to_file(generation, games_won_percent, avg_fitness)
        
        # Update population        
        parent1, parent2 = pop.choose_parents_tournament(1)
        child = pop.recombination(parent1, parent2)
        
        pop.overwrite_population(child.code)
        log_chromosome.log_to_file(generation, child.code.tolist())
        pop.mutate(0.001)
        
        
    finish_time = time.perf_counter()
    print(f"\nProgram finished in {finish_time-start_time} seconds")
